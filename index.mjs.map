{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floorn from '@stdlib/math-base-special-floorn';\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// MAIN //\n\n/**\n* Rounds each component of a double-precision complex floating-point number to the nearest multiple of `10^n` toward negative infinity.\n*\n* @param {Complex128} z - complex number\n* @param {integer} n - integer power of 10\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* // Round components to 2 decimal places:\n* var v = cfloorn( new Complex128( -3.141592653589793, 3.141592653589793 ), -2 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -3.15\n*\n* var im = imag( v );\n* // returns 3.14\n*\n* // If n = 0, `cfloorn` behaves like `cfloor`:\n* v = cfloorn( new Complex128( 9.99999, 0.1 ), 0 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 9.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* // Round components to the nearest thousand:\n* v = cfloorn( new Complex128( 12368.0, -12368.0 ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 12300\n*\n* im = imag( v );\n* // returns -12400\n*\n* v = cfloorn( new Complex128( NaN, NaN ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction cfloorn( z, n ) {\n\treturn new Complex128( floorn( real( z ), n ), floorn( imag( z ), n ) );\n}\n\n\n// EXPORTS //\n\nexport default cfloorn;\n"],"names":["cfloorn","z","n","Complex128","floorn","real","imag"],"mappings":";;kXAiFA,SAASA,EAASC,EAAGC,GACpB,OAAO,IAAIC,EAAYC,EAAQC,EAAMJ,GAAKC,GAAKE,EAAQE,EAAML,GAAKC,GACnE"}